/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.qbitum.template.server.api;

import com.qbitum.template.server.model.SampleRequest;
import com.qbitum.template.server.model.SampleResponse;
import com.qbitum.template.server.model.ServerErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-13T18:17:34.618622380+05:30[Asia/Colombo]")
@Validated
@Tag(name = "sample", description = "the sample API")
public interface V1Api {

    default V1ApiDelegate getDelegate() {
        return new V1ApiDelegate() {};
    }

    /**
     * GET /v1/sampleTemplate/data/{id1},{id2} : Sample Get Api using openapi generator
     * Results will be different by product or based on roles of the current logged in user
     *
     * @param authorization Bearer Token for Authorization (required)
     * @param xClientId client ID (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param id3  (required)
     * @return list of available components (status code 200)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "sampleTemplateGetApi",
        summary = "Sample Get Api using openapi generator",
        description = "Results will be different by product or based on roles of the current logged in user",
        tags = { "sample" },
        responses = {
            @ApiResponse(responseCode = "200", description = "list of available components", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SampleResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/sampleTemplate/data/{id1},{id2}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<SampleResponse>> sampleTemplateGetApi(
        @NotNull @Parameter(name = "Authorization", description = "Bearer Token for Authorization", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTA4MjIxMjEsImlhdCI6MTcxMDgyMDkyMSwianRpIjoiZDg0ZDVlYWYtNjAzNi00YTk0LWE5ZTItZjU0NDY1MmU3MWQ3IiwiaXNzIjoiaHR0cHM6Ly9leGFtcGxlLnFiaXR1bS5uZXQvYXV0aC9yZWFsbXMvUUIiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiNWYxNTEzMjMtNzgzMS00MTc3LWI5ZjItODI0MGMxOGRmY2Y5IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoicHJvdGVjdGVkIiwic2Vzc2lvbl9zdGF0ZSI6Ijc0ZWJjNjgxLWEzOGYtNDhlZC04ZGMxLWM3Njk1MmM5OTNmOCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJkZWZhdWx0LXJvbGVzLXFiLWluc3BlY3QiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsInNpZCI6Ijc0ZWJjNjgxLWEzOGYtNDhlZC04ZGMxLWM3Njk1MmM5OTNmOCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicHJvZmlsZSI6ImhlaHV3aGRkIiwibmFtZSI6ImRldiB1c2VyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZGV2dXNlciIsImdpdmVuX25hbWUiOiJkZXYiLCJmYW1pbHlfbmFtZSI6InVzZXIiLCJlbWFpbCI6ImRldnVzZXJAcWJpdHVtLmNvbSJ9.DAItVmFlE7Vs57GE0Svc0lbt-4QVaIuxA5q12EOWDwQ") String authorization,
        @NotNull @Parameter(name = "X-Client-Id", description = "client ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Client-Id", required = true, defaultValue = "web") String xClientId,
        @Parameter(name = "id1", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id1") String id1,
        @Parameter(name = "id2", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id2") String id2,
        @NotNull @Parameter(name = "id3", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id3", required = true, defaultValue = "query-id-3") String id3,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().sampleTemplateGetApi(authorization, xClientId, id1, id2, id3, exchange);
    }


    /**
     * POST /v1/sampleTemplate/postData : Sample post Api using openapi generator
     * Results will be different by product or based on roles of the current logged in user
     *
     * @param authorization Bearer Token for Authorization (required)
     * @param xClientId client ID (required)
     * @param sampleRequest  (required)
     * @return list of components has been added (status code 201)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "sampleTemplatePostApi",
        summary = "Sample post Api using openapi generator",
        description = "Results will be different by product or based on roles of the current logged in user",
        tags = { "sample" },
        responses = {
            @ApiResponse(responseCode = "201", description = "list of components has been added", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SampleResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/sampleTemplate/postData",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<SampleResponse>> sampleTemplatePostApi(
        @NotNull @Parameter(name = "Authorization", description = "Bearer Token for Authorization", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTA4MjIxMjEsImlhdCI6MTcxMDgyMDkyMSwianRpIjoiZDg0ZDVlYWYtNjAzNi00YTk0LWE5ZTItZjU0NDY1MmU3MWQ3IiwiaXNzIjoiaHR0cHM6Ly9leGFtcGxlLnFiaXR1bS5uZXQvYXV0aC9yZWFsbXMvUUIiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiNWYxNTEzMjMtNzgzMS00MTc3LWI5ZjItODI0MGMxOGRmY2Y5IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoicHJvdGVjdGVkIiwic2Vzc2lvbl9zdGF0ZSI6Ijc0ZWJjNjgxLWEzOGYtNDhlZC04ZGMxLWM3Njk1MmM5OTNmOCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJkZWZhdWx0LXJvbGVzLXFiLWluc3BlY3QiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsInNpZCI6Ijc0ZWJjNjgxLWEzOGYtNDhlZC04ZGMxLWM3Njk1MmM5OTNmOCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicHJvZmlsZSI6ImhlaHV3aGRkIiwibmFtZSI6ImRldiB1c2VyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZGV2dXNlciIsImdpdmVuX25hbWUiOiJkZXYiLCJmYW1pbHlfbmFtZSI6InVzZXIiLCJlbWFpbCI6ImRldnVzZXJAcWJpdHVtLmNvbSJ9.DAItVmFlE7Vs57GE0Svc0lbt-4QVaIuxA5q12EOWDwQ") String authorization,
        @NotNull @Parameter(name = "X-Client-Id", description = "client ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Client-Id", required = true, defaultValue = "web") String xClientId,
        @Parameter(name = "SampleRequest", description = "", required = true) @Valid @RequestBody Mono<SampleRequest> sampleRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().sampleTemplatePostApi(authorization, xClientId, sampleRequest, exchange);
    }

}
